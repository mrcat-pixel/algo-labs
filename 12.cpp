#include <iostream>
#include <vector>
#include <set>

using namespace std;

int main() {
    int32_t n, k;
    cin >> n >> k;

    vector<int32_t> thing;
    thing.resize(n);
    for (int32_t i = 0; i < n; i++) cin >> thing[i];

    multiset<int32_t> window;
    for (int32_t i = 0; i < k; i++)
        window.insert(thing[i]);
    cout << *window.begin() << " ";

    for (int32_t i = k; i < n; i++) {
        window.erase(window.find(thing[i - k]));
        window.insert(thing[i]);
        cout << *window.begin() << " ";
    }
}

/*
Рассмотрим последовательность целых чисел длины N. По ней с шагом 1 двигается «окно» длины K, то есть сначала в «окне» видно первые K чисел, на следующем шаге в «окне» уже будут находиться K чисел, начиная со второго, и так далее до конца последовательности. Требуется для каждого положения «окна» определить минимум в нём.
Формат ввода

В первой строке входных данных содержатся два числа N и K (1 ≤ N ≤ 150000, 1 ≤ K ≤ 10000, K ≤ N) – длины последовательности и «окна», соответственно. На следующей строке находятся N чисел – сама последовательность. Числа последовательности не превосходят по модулю 105.
Формат вывода

Выходые данные должны содержать N - K + 1 строк – минимумы для каждого положения «окна». 
*/